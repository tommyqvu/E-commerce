{"ast":null,"code":"import _regeneratorRuntime from \"/Users/thomasvu/Downloads/Coding/Deployed/React Apps/e-commerce/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { startCollectionFetch, successCollectionFetch, failedCollectionFetch } from '../actionTypes';\nimport { convertCollectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { failedCollectionFetchAction, successCollectionFetchAction } from './shop.actions';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collectionRef = firestore.collection('collections');\n          _context.next = 4;\n          return collectionRef.get();\n\n        case 4:\n          snapshot = _context.sent;\n          _context.next = 7;\n          return call(convertCollectionsSnapshotToMap, snapshot);\n\n        case 7:\n          collectionsMap = _context.sent;\n          _context.next = 10;\n          return put(successCollectionFetchAction(collectionsMap));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(failedCollectionFetchAction);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(startCollectionFetch, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/thomasvu/Downloads/Coding/Deployed/React Apps/e-commerce/src/redux/shop/shop.saga.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeEvery","call","put","startCollectionFetch","successCollectionFetch","failedCollectionFetch","convertCollectionsSnapshotToMap","firestore","failedCollectionFetchAction","successCollectionFetchAction","collectionRef","collection","get","snapshot","collectionsMap"],"mappings":";;;;yBAiBiBA,qB;;;yBAgBAC,qB;;AAjCjB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,qBAHF,QAIO,gBAJP;AAMA,SACEC,+BADF,EAEEC,SAFF,QAGO,+BAHP;AAIA,SACEC,2BADF,EAEEC,4BAFF,QAGO,gBAHP;AAKA,OAAO,SAAUX,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGY,UAAAA,aAFH,GAEmBH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAFnB;AAAA;AAIc,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AAJd;AAIGC,UAAAA,QAJH;AAAA;AAKoB,iBAAMZ,IAAI,CAC/BK,+BAD+B,EAE/BO,QAF+B,CAAV;;AALpB;AAKGC,UAAAA,cALH;AAAA;AASH,iBAAMZ,GAAG,CAACO,4BAA4B,CAACK,cAAD,CAA7B,CAAT;;AATG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWH,iBAAMZ,GAAG,CAACM,2BAAD,CAAT;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAUT,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMC,SAAS,CAACG,oBAAD,EAAuBL,qBAAvB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  startCollectionFetch,\n  successCollectionFetch,\n  failedCollectionFetch,\n} from '../actionTypes';\n\nimport {\n  convertCollectionsSnapshotToMap,\n  firestore,\n} from '../../firebase/firebase.utils';\nimport {\n  failedCollectionFetchAction,\n  successCollectionFetchAction,\n} from './shop.actions';\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot,\n    );\n    yield put(successCollectionFetchAction(collectionsMap));\n  } catch (e) {\n    yield put(failedCollectionFetchAction);\n  }\n\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(startCollectionFetch, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}